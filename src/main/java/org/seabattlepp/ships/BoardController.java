package org.seabattlepp.ships;

import org.seabattlepp.gui.BoardPanel;
import org.seabattlepp.gui.ShipButton;
import javax.swing.plaf.basic.BasicButtonUI;
import java.awt.*;
import java.util.List;
import org.seabattlepp.logic.GameLogic;


public class BoardController implements BoardManager {
    private final BoardPanel boardPanel;
    private boolean isGameStarted = false;
    private GameLogic gameLogic;

    public BoardController(BoardPanel boardPanel) {
        this.boardPanel = boardPanel;
    }

    public void setGameLogic(GameLogic gameLogic) {
        this.gameLogic = gameLogic;
    }

    public GameLogic getGameLogic() {
        return gameLogic;
    }

    // üîπ –†–∞–Ω–¥–æ–º–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –Ω–∞ –ª—ñ–≤—ñ–π (–≥—Ä–∞–≤–µ—Ü—å) –¥–æ—à—Ü—ñ
    @Override
    public void placeShipsRandomlyOnLeftBoard() {
        ShipValidator validator = new ShipValidator();
        ShipPlacer placer = new ShipPlacer(validator);
        List<Ship> placedShips = placer.placeShipsRandomly();

        if (gameLogic != null) {
            gameLogic.setPlayerShips(placedShips);
        }

        clearLeftBoardShips();
        for (Ship ship : placedShips) {
            for (int[] coord : ship.getCoordinates()) {
                int row = coord[0];
                int col = coord[1];
                ShipButton button = boardPanel.playerShipButtons[row][col];
                if (button != null) {
                    // –í—ñ–∑—É–∞–ª—å–Ω–æ –ø–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å ‚öì
                    button.setIcon(null);
                    button.setText("‚öì");
                    button.setFont(new Font("Inter", Font.BOLD, 50));
                    button.setForeground(Color.BLACK);
                    button.setEnabled(true);
                    button.setBackground(Color.WHITE);
                }
            }
        }
    }

    // üîπ –†–∞–Ω–¥–æ–º–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –Ω–∞ –ø—Ä–∞–≤—ñ–π (–∫–æ–º–ø‚Äô—é—Ç–µ—Ä) –¥–æ—à—Ü—ñ
    @Override
    public void placeShipsRandomlyOnRightBoard() {
        ShipValidator validator = new ShipValidator();
        ShipPlacer placer = new ShipPlacer(validator);
        List<Ship> placedShips = placer.placeShipsRandomly();

        if (gameLogic != null) {
            gameLogic.setComputerShips(placedShips);
        }

        clearRightBoardShips(); // –æ—á–∏—â—É—î–º–æ –ø–µ—Ä–µ–¥ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è–º

        for (Ship ship : placedShips) {
            for (int[] coord : ship.getCoordinates()) {
                int row = coord[0];
                int col = coord[1];
                ShipButton button = boardPanel.computerShipButtons[row][col];
                if (button != null) {
                    // –í—ñ–∑—É–∞–ª—å–Ω–æ –ø–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å ‚öì
                    button.setBackground(Color.WHITE);
                    button.setForeground(Color.BLACK);
                    button.setFont(new Font("Inter", Font.BOLD, 25));
                    button.setIcon(null);
                    button.setOpaque(false);
                    button.setEnabled(true);
                }
            }
        }
    }

    // üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ –ª—ñ–≤—É –¥–æ—à–∫—É –≥—Ä–∞–≤—Ü—è
    @Override
    public void clearLeftBoardShips() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.playerShipButtons[i][j];
                if (button != null) {
                    button.setIcon(null);
                    button.setText("");
                    button.setBackground(Color.WHITE);
                    button.setEnabled(true);
                    button.setOpaque(false);
                    button.setUI(new BasicButtonUI());
                }
            }
        }
    }

    // üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–∞–≤—É –¥–æ—à–∫—É –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞
    @Override
    public void clearRightBoardShips() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.computerShipButtons[i][j];
                if (button != null) {
                    button.setIcon(null);
                    button.setText("");
                    button.setBackground(Color.WHITE);
                    button.setEnabled(true);
                    button.setOpaque(false);
                    button.setUI(new BasicButtonUI());
                }
            }
        }
    }

    // üîÅ –°–∫–∏–Ω—É—Ç–∏ –≥—Ä—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    @Override
    public void resetBoards() {
        clearLeftBoardShips();
        clearRightBoardShips();
        isGameStarted = false;

        gameLogic.resetGame();

        enablePlayerButtonsForPlacement();
        disableComputerButtons();
    }

    // üîò –ü–æ–∑–Ω–∞—á–∏—Ç–∏, —â–æ –≥—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å (–∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å)
    @Override
    public void setGameStarted(boolean started) {
        isGameStarted = started;

        // –Ø–∫—â–æ –≥—Ä–∞ —â–æ–π–Ω–æ –ø–æ—á–∞–ª–∞—Å—å —ñ –Ω–µ —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è ‚Äî –ø–æ—á–∏–Ω–∞—î –∫–æ–º–ø‚Äô—é—Ç–µ—Ä
        if (started && !gameLogic.isPlayerTurn()) {
             gameLogic.startComputerTurn();
         }
    }

    @Override
    public boolean isGameStarted() {
        return isGameStarted;
    }

    // üîì –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≥—Ä–∞–≤—Ü—è (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è)
    @Override
    public void enablePlayerButtonsForPlacement() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.playerShipButtons[i][j];
                if (button != null) {
                    button.setEnabled(true);
                }
            }
        }
    }

    // üîì –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≥—Ä–∞–≤—Ü—é —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä—É
    @Override
    public void enableComputerButtons() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.computerShipButtons[i][j];
                if (button != null && button.getIcon() == null && button.getBackground() != Color.RED) {
                    button.setEnabled(true);
                }
            }
        }
    }

    // üîí –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä—É
    @Override
    public void disableComputerButtons() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.computerShipButtons[i][j];
                if (button != null) {
                    button.setEnabled(false);
                }
            }
        }
    }

    // üîì –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ –≥—Ä–∞–≤—Ü—è (–ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è)
    @Override
    public void enablePlayerButtons() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.playerShipButtons[i][j];
                if (button != null && button.getIcon() == null && button.getBackground() != Color.RED) {
                    button.setEnabled(true);
                }
            }
        }
    }

    // üîí –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏ –≥—Ä–∞–≤—Ü—è
    @Override
    public void disablePlayerButtons() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                ShipButton button = boardPanel.playerShipButtons[i][j];
                if (button != null) {
                    button.setEnabled(false);
                }
            }
        }
    }
}
