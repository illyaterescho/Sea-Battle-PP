package org.seabattlepp.logic;

import org.seabattlepp.logic.ai.AILogic;
import org.seabattlepp.ships.BoardController;
import org.seabattlepp.ships.Ship;
import org.seabattlepp.gui.ShipButton;
import org.seabattlepp.gui.MainFrame;

import javax.swing.*;
import java.util.List;

public class GameLogic {

    private final BoardController boardController;
    private final MainFrame mainFrame;
    private final ShipButton[][] computerShipButtons;
    private final ShipButton[][] playerShipButtons;
    private Ship[][] computerShipsLocations;
    private Ship[][] playerShipsLocations;
    private boolean isPlayerTurn;

    private final AILogic aiLogic;
    private final PlayerLogic playerLogic;
    private final UIMarkingLogic uiMarkingLogic; // –î–æ–¥–∞—î–º–æ UIMarkingLogic

    public GameLogic(MainFrame mainFrame, BoardController boardController, ShipButton[][] computerShipButtons, ShipButton[][] playerShipButtons) {
        this.boardController = boardController;
        this.computerShipButtons = computerShipButtons;
        this.playerShipButtons = playerShipButtons;
        this.mainFrame = mainFrame;
        this.aiLogic = new AILogic(this, boardController, playerShipButtons);
        this.playerLogic = new PlayerLogic(this, boardController, computerShipButtons);
        this.uiMarkingLogic = new UIMarkingLogic(this, boardController, computerShipButtons, playerShipButtons);
        this.isPlayerTurn = true; // –ì—Ä–∞–≤–µ—Ü—å –ø–æ—á–∏–Ω–∞—î
        resetComputerShipsLocations();
        resetPlayerShipsLocations();
    }

    public boolean isPlayerTurn() {
        return isPlayerTurn;
    }

    // –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–≥–∏ –≥—Ä–∞–≤—Ü—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AILogic —Ç–∞ PlayerLogic
    public void setPlayerTurn(boolean playerTurn) {
        isPlayerTurn = playerTurn;
    }

    // ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –≥—Ä–∏
    public void startGame() {
        isPlayerTurn = true;
        boardController.setGameStarted(true);
        boardController.enableComputerButtons();
        boardController.disablePlayerButtons();
        aiLogic.resetAI(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AILogic –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è AI
        playerLogic.startPlayerTurn(); // –ü–æ—á–∏–Ω–∞—î–º–æ —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è —á–µ—Ä–µ–∑ PlayerLogic
    }

    // ‚è© –•—ñ–¥ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
    public void startComputerTurn() {
        aiLogic.startComputerTurn(); // –ø–æ—á–∞—Ç–æ–∫ —Ö–æ–¥—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –¥–æ AILogic
    }

    // üîÅ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—é
    public void startPlayerTurn() {
        playerLogic.startPlayerTurn();
    }

    // üî´ –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –≥—Ä–∞–≤—Ü—è –ø–æ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä—É
    public void processShot(int row, int col) {
        playerLogic.processShot(row, col); // –±—Ä–æ–±–∫—É –ø–æ—Å—Ç—Ä—ñ–ª—É –≥—Ä–∞–≤—Ü—è –¥–æ PlayerLogic
    }

    // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PlayerLogic
    public Ship getShipAt(int row, int col) {
        return computerShipsLocations[row][col];
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å –≥—Ä–∞–≤—Ü—è –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    public Ship getPlayerShipAt(int row, int col) {
        return playerShipsLocations[row][col];
    }

    // ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –ø–æ –∫–æ—Ä–∞–±–ª—é –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞
    public boolean markHit(int row, int col, Ship ship) {
        boolean sunk = false;
        if (computerShipButtons[row][col] != null) {
            ship.takeHit();           // –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–ª–∏ –≤–ª—É—á–∞–Ω–Ω—è
            sunk = ship.isSunk();     // —á–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ

            if (sunk) {
                uiMarkingLogic.markSunkShip(ship); // –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—è
            } else {
                uiMarkingLogic.markHitSymbol(computerShipButtons[row][col]); // –∑–≤–∏—á–∞–π–Ω–µ –≤–ª—É—á–∞–Ω–Ω—è
            }
        }
        return sunk;
    }

    // ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –®–Ü –ø–æ –∫–æ—Ä–∞–±–ª—é –≥—Ä–∞–≤—Ü—è
    public boolean markHitPlayerBoard(int row, int col, Ship ship) {
        boolean sunk = false;
        if (playerShipButtons[row][col] != null) {
            ship.takeHit();
            sunk = ship.isSunk();

            if (sunk) {
                uiMarkingLogic.markSunkShipPlayerBoard(ship); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UIMarkingLogic
            } else {
                uiMarkingLogic.markHitSymbolPlayerBoard(playerShipButtons[row][col]);            }
        }
        return sunk;
    }

    // ‚ùå –ü—Ä–æ–º–∞—Ö –≥—Ä–∞–≤—Ü—è
    void markMiss(int row, int col) {
        if (computerShipButtons[row][col] != null) {
            uiMarkingLogic.markMiss(row, col); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UIMarkingLogic
        }
    }

    // ‚ùå –ü—Ä–æ–º–∞—Ö –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞
    public void markMissPlayerBoard(int row, int col) {
        if (playerShipButtons[row][col] != null) {
            uiMarkingLogic.markMissPlayerBoard(row, col); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UIMarkingLogic
        }
    }

    // üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—ñ–≤ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞
    public void resetComputerShipsLocations() {
        computerShipsLocations = new Ship[11][11];
    }

    // üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è
    public void resetPlayerShipsLocations() {
        playerShipsLocations = new Ship[11][11];
    }

    // ‚Ü©Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞
    public void setComputerShips(List<Ship> ships) {
        resetComputerShipsLocations();
        for (Ship ship : ships) {
            for (int[] coord : ship.getCoordinates()) {
                int row = coord[0];
                int col = coord[1];
                computerShipsLocations[row][col] = ship;
            }
        }
    }

    // ‚Ü©Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è
    public void setPlayerShips(List<Ship> ships) {
        resetPlayerShipsLocations();
        for (Ship ship : ships) {
            for (int[] coord : ship.getCoordinates()) {
                int row = coord[0];
                int col = coord[1];
                playerShipsLocations[row][col] = ship;
            }
        }
    }


    // üìâ –ß–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–∞ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ?
    private boolean computerShipsLocationsIsEmpty() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                if (computerShipsLocations[i][j] != null && !computerShipsLocations[i][j].isSunk()) {
                    return false;
                }
            }
        }
        return true;
    }

    // üìâ –ß–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –≥—Ä–∞–≤—Ü—è –ø–æ—Ç–æ–ø–ª–µ–Ω–æ?
    private boolean playerShipsLocationsIsEmpty() {
        for (int i = 1; i <= 10; i++) {
            for (int j = 1; j <= 10; j++) {
                if (playerShipsLocations[i][j] != null && !playerShipsLocations[i][j].isSunk()) {
                    return false;
                }
            }
        }
        return true;
    }


    // üß† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
    public void checkGameEnd() {
        boolean computerSunk = computerShipsLocationsIsEmpty();
        boolean playerSunk = playerShipsLocationsIsEmpty();

        if (computerSunk) {
            endGame(true);
        } else if (playerSunk) {
            endGame(false);
        }
    }

    // üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏: –ø–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
    private void endGame(boolean playerWon) {
        if (playerWon) {
            JOptionPane.showMessageDialog(mainFrame, "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!", "–ö—ñ–Ω–µ—Ü—å –≥—Ä–∏!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(mainFrame, "–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥!", "–ö—ñ–Ω–µ—Ü—å –≥—Ä–∏!", JOptionPane.INFORMATION_MESSAGE);
        }
        boardController.setGameStarted(false);
        mainFrame.disableRandomButton(); // –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ MainFrame
        boardController.resetBoards();
        aiLogic.resetAI();
    }

    // üîÑ –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è –≥—Ä–∏
    public void resetGame() {
        resetComputerShipsLocations();
        resetPlayerShipsLocations();
        aiLogic.resetAI(); // AILogic –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è AI
        isPlayerTurn = true; // –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –≥—Ä–∏ –≥—Ä–∞–≤–µ—Ü—å –ø–æ—á–∏–Ω–∞—î –ø–µ—Ä—à–∏–º
    }
}
